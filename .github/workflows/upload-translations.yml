name: 'Upload translations to Crowdin'
  
on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  push_and_pull_crowdin_translations:
    if: github.repository == 'binary-com/deriv-app'
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v2

      # We checkout the master branch so we can run the translations
      # script on the latest changes.
      - name: Checkout master branch
        uses: actions/checkout@v2.3.4

      - name: Get cached dependencies
        id: cache_npm
        uses: actions/cache@v3
        with:
          key: translations-build-${{ hashFiles('**/package-lock.json') }}
          path: |
              node_modules
              packages/account/node_modules
              packages/api/node_modules
              packages/appstore/node_modules
              packages/bot-skeleton/node_modules
              packages/bot-web-ui/node_modules
              packages/cashier/node_modules
              packages/components/node_modules
              packages/core/node_modules
              packages/hooks/node_modules
              packages/cfd/node_modules
              packages/indicators/node_modules
              packages/p2p/node_modules
              packages/reports/node_modules
              packages/shared/node_modules
              packages/stores/node_modules
              packages/trader/node_modules
              packages/translations/node_modules
              packages/utils/node_modules
              packages/analytics/node_modules


      - name: Install dependencies
        if: ${{ steps.cache_npm.outputs.cache-hit != 'true' }}
        run: |
          npm run bootstrap

      # In this step we're doing a couple things:
      # - We generate a new messages.json
      # - We hash the newly generated messages.json and compare it with the messages.json on Crowdin.
      # - We download the latest translation files from Crowdin, if there are new files, we create a PR.
      - name: Generate and push to Crowdin
        run: |
          branch_name="deriv_app_translations_2"

          echo "Installing Crowdin CLI"
          sudo npm i -g @crowdin/cli

          echo "Running the translation script (extract-translations.js)"
          cd $(git rev-parse --show-toplevel)/packages/translations/scripts
          node extract-translations.js
          new_messages_json_hash="$(git hash-object $(git rev-parse --show-toplevel)/packages/translations/crowdin/messages.json)"
          echo "- [generated]: message.json hash is $new_messages_json_hash"

          echo "Downloading messages.json from Crowdin for comparison"
          cd $(git rev-parse --show-toplevel)/packages/translations
          crowdin download sources -T ${{ secrets.CROWDIN_API_KEY }}
          crowdin_messages_json_hash="$(git hash-object messages.json)"
          echo "- [crowdin]: message.json hash is $crowdin_messages_json_hash"
          rm messages.json 

          echo "Running the translation script (extract-translations.js) in p2p"
          cd $(git rev-parse --show-toplevel)/packages/p2p/scripts
          node extract-translations.js
          new_p2p_messages_json_hash="$(git hash-object $(git rev-parse --show-toplevel)/packages/p2p/crowdin/messages.json)"
          echo "- [generated]: message.json hash is $new_p2p_messages_json_hash"

          echo "Downloading messages.json from Crowdin for comparison"
          cd $(git rev-parse --show-toplevel)/packages/p2p
          crowdin download sources -T ${{ secrets.CROWDIN_API_KEY }}
          crowdin_p2p_messages_json_hash="$(git hash-object messages.json)"
          echo "- [crowdin]: message.json hash is $crowdin_p2p_messages_json_hash"
          rm messages.json 

          # We compare the generated messages.json with the messages.json from Crowdin.
          # Only send a Slack message and upload it to Crowdin if there were any changes made to messages.json.
          if [ "$crowdin_messages_json_hash" != "$new_messages_json_hash" ]; then
            echo "Hashes are different, uploading to Crowdin"
            echo "- [crowdin]: $crowdin_messages_json_hash";
            echo "- [generated]: $new_messages_json_hash";

            # Upload to Crowdin.
            cd $(git rev-parse --show-toplevel)/packages/translations
            echo "Uploading new strings to Crowdin"
            # crowdin upload sources -T ${{ secrets.CROWDIN_API_KEY }}
          fi

          # We compare the generated messages.json with the messages.json from Crowdin in p2p.
          # Only send a Slack message and upload it to Crowdin if there were any changes made to messages.json.
          if [ "$crowdin_p2p_messages_json_hash" != "$new_p2p_messages_json_hash" ]; then
            echo "Hashes are different, uploading to Crowdin"
            echo "- [crowdin]: $crowdin_p2p_messages_json_hash";
            echo "- [generated]: $new_p2p_messages_json_hash";

            # Upload to Crowdin.
            cd $(git rev-parse --show-toplevel)/packages/p2p
            echo "Uploading new strings to Crowdin"
            # crowdin upload sources -T ${{ secrets.CROWDIN_API_KEY }}
          fi
