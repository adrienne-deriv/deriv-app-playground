name: 'Update translations from Crowdin'

on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - file-fully-reviewed

jobs:
  synchronize-with-crowdin:
    runs-on: ubuntu-latest

    steps:
      # We checkout the master branch so we can run the translations
      # script on the latest changes.
      - name: Checkout master branch
        uses: actions/checkout@v2.3.4

      # In this step we're doing a couple things:
      # - We generate a new messages.json
      # - We hash the newly generated messages.json and compare it with the messages.json on Crowdin.
      # - We download the latest translation files from Crowdin, if there are new files, we create a PR.
      - name: Generate and push to Crowdin
        run: |
          branch_name="deriv_app_translations"

          echo "Setting up Git identity"
          git config --global user.name "DerivFE"
          git config --global user.email "80095553+DerivFE@users.noreply.github.com"

          echo "Installing Crowdin CLI and bootstrapping project"
          sudo npm i -g @crowdin/cli
          npm run bootstrap

          echo "Checking out new branch [$branch_name]"
          git checkout -b "$branch_name"

          echo "Running the translation script (extract-translations.js)"
          cd $(git rev-parse --show-toplevel)/packages/translations/scripts
          node extract-translations.js
          new_messages_json_hash="$(git hash-object $(git rev-parse --show-toplevel)/packages/translations/crowdin/messages.json)"
          echo "- [generated]: message.json hash is $new_messages_json_hash"

          echo "Downloading messages.json from Crowdin for comparison"
          cd $(git rev-parse --show-toplevel)/packages/translations
          crowdin download sources -T ${{ secrets.CROWDIN_API_KEY }} -i ${{ secrets.CROWDIN_PROJECT_ID }}
          crowdin_messages_json_hash="$(git hash-object messages.json)"
          echo "- [crowdin]: message.json hash is $crowdin_messages_json_hash"
          rm messages.json 

          echo "Running the translation script (extract-translations.js) in p2p"
          cd $(git rev-parse --show-toplevel)/packages/p2p/scripts
          node extract-translations.js
          new_p2p_messages_json_hash="$(git hash-object $(git rev-parse --show-toplevel)/packages/p2p/crowdin/messages.json)"
          echo "- [generated]: message.json hash is $new_p2p_messages_json_hash"

          echo "Downloading messages.json from Crowdin for comparison"
          cd $(git rev-parse --show-toplevel)/packages/p2p
          crowdin download sources -T ${{ secrets.CROWDIN_API_KEY }} -i ${{ secrets.CROWDIN_PROJECT_ID }}
          crowdin_p2p_messages_json_hash="$(git hash-object messages.json)"
          echo "- [crowdin]: message.json hash is $crowdin_p2p_messages_json_hash"
          rm messages.json 

          # We compare the generated messages.json with the messages.json from Crowdin.
          # Only send a Slack message and upload it to Crowdin if there were any changes made to messages.json.
          if [ "$crowdin_messages_json_hash" != "$new_messages_json_hash" ]; then
            echo "Hashes are different, uploading to Crowdin"
            echo "- [crowdin]: $crowdin_messages_json_hash";
            echo "- [generated]: $new_messages_json_hash";
          fi

          # We compare the generated messages.json with the messages.json from Crowdin in p2p.
          # Only send a Slack message and upload it to Crowdin if there were any changes made to messages.json.
          if [ "$crowdin_p2p_messages_json_hash" != "$new_p2p_messages_json_hash" ]; then
            echo "Hashes are different, uploading to Crowdin"
            echo "- [crowdin]: $crowdin_p2p_messages_json_hash";
            echo "- [generated]: $new_p2p_messages_json_hash";
          fi

          # Download latest translations from Crowdin
          cd $(git rev-parse --show-toplevel)/packages/translations
          echo "Attempting to download updated translations from Crowdin"
          crowdin download -T ${{ secrets.CROWDIN_API_KEY }} -i ${{ secrets.CROWDIN_PROJECT_ID }}

          if [ -z "$(git status --porcelain)" ]; then
            echo "Found no new translation files that need to be merged with master. Not creating a PR."
          else
            echo "Found updated translation files that need to be merged with master. Creating a PR."

            # Commit the newly downloaded files
            cd $(git rev-parse --show-toplevel)
            git add .
            git commit -m "translations: ðŸ“š sync translations with crowdin"

            # Force push to this branch in case a previous run created it.
            git push --set-upstream origin "$branch_name" -f

            sudo apt install gh
            gh auth login --with-token <<< ${{ github.token }}
            gh pr close "$branch_name" || true
            gh pr create --fill --base "master" --head "binary-com:$branch_name"
          fi


      
